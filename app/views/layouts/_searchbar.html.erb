<%= content_for :javascripts do %>
  <%= javascript_include_tag 'search' %>
<% end %>
<%
  no_filter_for = local_assigns.fetch :no_filter_for, []
  no_dropdown_for = local_assigns.fetch :no_dropdown_for, []
  no_dropdown_for += no_filter_for
%>
<div class='table-toolbar'>
  <d-search-tokens class="search-tokens"
                   hide="<%= no_filter_for.to_json %>"></d-search-tokens>
  <div class='table-toolbar-tools'>
    <i class="mdi mdi-magnify"></i>
    <form class='search' onsubmit="return false;">
      <d-search-field placeholder="<%= t("layout.search.search") %>"
                      eager="<%= local_assigns.fetch :eager, false %>"
                      hide="<%= no_filter_for.to_json %>"
      ></d-search-field>
      <d-loading-bar search-based></d-loading-bar>
    </form>
    <% if local_assigns[:options]&.any? %>
      <d-search-options options='<%= raw (local_assigns.fetch :options, false).to_json %>'></d-search-options>
    <% end %>
  </div>
  <div class="d-flex align-items-center">
    <d-dropdown-filters class="dropdown-filters"
                        hide="<%= no_dropdown_for.to_json %>"
    ></d-dropdown-filters>
    <% if local_assigns[:actions]&.any? %>
      <div class="flex-spacer"></div>
      <d-search-actions
        actions='<%= raw (local_assigns.fetch :actions, false).to_json %>'
        <% if local_assigns[:actionFilter].present? %>
          filter-param='<%= local_assigns.fetch :actionFilter, false %>'
        <% end %>
      ></d-search-actions>
    <% end %>
  </div>
</div>

<script type="text/javascript">
    dodona.ready.then(function () {
        let filterCollections = {};
        <% if local_assigns.fetch :labels, false %>
        filterCollections["labels"] = {
            param: "labels",
            multi: true,
            data: <%= raw @labels.map { |l| {id: l.name.to_s, name: l.name.to_s}}.to_json %>,
            color: "purple"
        };
        <% end %>
        <% if local_assigns.fetch :programming_languages, false %>
        filterCollections["programming_languages"] = {
            param: "programming_language",
            multi: false,
            data: <%= raw @programming_languages.map { |l| {id: l.name.to_s, name: l.name.to_s}}.to_json %>,
            color: "red",
        };
        <% end %>
        <% if local_assigns.fetch :repositories, false %>
        filterCollections["repositories"] = {
            param: "repository_id",
            multi: false,
            data: <%= raw @repositories.map { |l| {id: l.id.to_s, name: l.name.to_s}}.to_json %>,
            color: "blue-gray",
        };
        <% end %>
        <% if local_assigns.fetch(:institutions, []).length > 1 %>
        filterCollections["institutions"] = {
            param: "institution_id",
            multi: false,
            data: <%= raw local_assigns.fetch(:institutions, []).map{|i| {id: i.id.to_s, name: i.name.to_s}}.to_json %>,
            color: "pink",
        };
        <% end %>
        <% if local_assigns.fetch :course_labels, false %>
        filterCollections["course_labels"] = {
            param: "course_labels",
            multi: true,
            data: <%= raw local_assigns.fetch(:course_labels, []).map{|cl| {id: cl.name.to_s, name: cl.name.to_s}}.to_json %>,
            color: "orange",
        };
        <% end %>
        <% if local_assigns.fetch :statuses, false %>
        filterCollections["statuses"] = {
            param: "status",
            multi: false,
            data: <%= raw local_assigns.fetch(:statuses, []).map{|s| {id: s.to_s, name: Submission.human_enum_name(:status, s)}}.to_json %>,
            color: "indigo",
        };
        <% end %>
        <% if local_assigns.fetch :question_states, false %>
        filterCollections["question_states"] = {
            param: "question_state",
            multi: false,
            data: <%= raw local_assigns.fetch(:question_states, []).map{|s| {id: s.to_s, name: Question.human_enum_name(:question_state, s)}}.to_json %>,
            color: "indigo",
        };
        <% end %>
        <% if local_assigns.fetch :event_types, false %>
        filterCollections["event_types"] = {
            param: "type",
            multi: false,
            data: <%= raw local_assigns.fetch(:event_types, []).map{|s| {id: s.to_s, name: Event.human_enum_name(:event_type, s)}}.to_json %>,
            color: "deep-purple",
        };
        <% end %>
        <% if local_assigns.fetch :activity_types, false %>
        filterCollections["activity_types"] = {
            param: "type",
            multi: false,
            data: <%= raw local_assigns.fetch(:activity_types, []).map{|s| {id: s.name.to_s, name: s.model_name.human}}.to_json %>,
            color: "deep-purple",
        };
        <% end %>
        <% if local_assigns.fetch :description_languages, false %>
        filterCollections["description_languages"] = {
            param: "description_languages",
            multi: true,
            data: <%= raw local_assigns.fetch(:description_languages, []).map{|l| {id: l.to_s, name: t("js.#{l}")}}.to_json %>,
            color: "orange",
        };
        <% end %>
        <% if local_assigns.fetch :judges, false %>
        filterCollections["judges"] = {
            param: "judge_id",
            multi: false,
            data: <%= raw local_assigns.fetch(:judges, []).map{|judge| {id: judge.id.to_s, name: "#{judge.name}-judge"}}.to_json %>,
            color: "red",
        }
        <% end %>
        <% if local_assigns.fetch :courses, false %>
        filterCollections["courses"] = {
            param: "course_id",
            multi: false,
            data: <%= raw local_assigns.fetch(:courses, []).map{|course| {id: course.id.to_s, name: "#{course.name} (#{course.formatted_year})"}}.to_json %>,
            color: "orange"
        };
        <% end %>
        <% if local_assigns.fetch :exercises, false %>
        filterCollections["exercises"] = {
          param: "exercise_id",
          multi: false,
          data: <%= raw local_assigns.fetch(:exercises, []).map{|exercise| {id: exercise.id.to_s, name: exercise.name}}.to_json %>,
          color: "blue-gray"
        };
        <% end %>
        <% if local_assigns.fetch :popularity, false %>
            filterCollections["popularity"] = {
              param: "popularity",
              multi: true,
              data: <%= raw local_assigns.fetch(:popularity, []).map{|s| {id: s.to_s, name: Activity.human_enum_name(:popularity, s)}}.to_json %>,
              color: "pink",
            };
        <% end %>
      <% if local_assigns.fetch :draft, false %>
        filterCollections["draft"] = {
          param: "draft",
          multi: false,
          data: [
            {id: "true", name: "<%= t("activities.index.filters.draft") %>"},
            {id: "false", name: "<%= t("activities.index.filters.not_draft") %>"}
          ],
          color: "indigo",
        };
      <% end %>

        dodona.search.setRefreshElement("<%= local_assigns.fetch :refresh_element, "" %>");

        // load the given localStorageKey if present. This key is used to retrieve the values stored in localStorage
        const localStorageKey = "<%= local_assigns.fetch :local_storage_key, "" %>"
        dodona.search.setBaseUrl("<%= local_assigns.fetch :baseUrl, "" %>");
        dodona.search.autoSearch = <%= local_assigns.fetch :autoSearch, true %>;
        dodona.search.setLocalStorageKey(localStorageKey);

        dodona.search.updateFilters(<%= raw @filters.to_json %>);
    });
</script>
